// Code generated by MockGen. DO NOT EDIT.
// Source: io_calls.go

// Package main is a generated GoMock package.
package main

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOSCalls is a mock of OSCalls interface.
type MockOSCalls struct {
	ctrl     *gomock.Controller
	recorder *MockOSCallsMockRecorder
}

// MockOSCallsMockRecorder is the mock recorder for MockOSCalls.
type MockOSCallsMockRecorder struct {
	mock *MockOSCalls
}

// NewMockOSCalls creates a new mock instance.
func NewMockOSCalls(ctrl *gomock.Controller) *MockOSCalls {
	mock := &MockOSCalls{ctrl: ctrl}
	mock.recorder = &MockOSCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSCalls) EXPECT() *MockOSCallsMockRecorder {
	return m.recorder
}

// OpenFile mocks base method.
func (m *MockOSCalls) OpenFile(name string, flag int, perm os.FileMode) (OSFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(OSFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockOSCallsMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockOSCalls)(nil).OpenFile), name, flag, perm)
}

// Remove mocks base method.
func (m *MockOSCalls) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockOSCallsMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOSCalls)(nil).Remove), name)
}

// RunCommand mocks base method.
func (m *MockOSCalls) RunCommand(cmd []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommand", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand.
func (mr *MockOSCallsMockRecorder) RunCommand(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockOSCalls)(nil).RunCommand), cmd)
}

// Stat mocks base method.
func (m *MockOSCalls) Stat(name string) (OSFileSize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(OSFileSize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOSCallsMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOSCalls)(nil).Stat), name)
}

// MockOSFile is a mock of OSFile interface.
type MockOSFile struct {
	ctrl     *gomock.Controller
	recorder *MockOSFileMockRecorder
}

// MockOSFileMockRecorder is the mock recorder for MockOSFile.
type MockOSFileMockRecorder struct {
	mock *MockOSFile
}

// NewMockOSFile creates a new mock instance.
func NewMockOSFile(ctrl *gomock.Controller) *MockOSFile {
	mock := &MockOSFile{ctrl: ctrl}
	mock.recorder = &MockOSFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSFile) EXPECT() *MockOSFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockOSFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockOSFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockOSFile)(nil).Close))
}

// Read mocks base method.
func (m *MockOSFile) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockOSFileMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockOSFile)(nil).Read), b)
}

// Write mocks base method.
func (m *MockOSFile) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockOSFileMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockOSFile)(nil).Write), b)
}

// MockOSFileSize is a mock of OSFileSize interface.
type MockOSFileSize struct {
	ctrl     *gomock.Controller
	recorder *MockOSFileSizeMockRecorder
}

// MockOSFileSizeMockRecorder is the mock recorder for MockOSFileSize.
type MockOSFileSizeMockRecorder struct {
	mock *MockOSFileSize
}

// NewMockOSFileSize creates a new mock instance.
func NewMockOSFileSize(ctrl *gomock.Controller) *MockOSFileSize {
	mock := &MockOSFileSize{ctrl: ctrl}
	mock.recorder = &MockOSFileSizeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSFileSize) EXPECT() *MockOSFileSizeMockRecorder {
	return m.recorder
}

// Size mocks base method.
func (m *MockOSFileSize) Size() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockOSFileSizeMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockOSFileSize)(nil).Size))
}
